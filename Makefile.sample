
app     = exampleUsage

srcExt  = c
cudaExt = cu
srcDir  = src
objDir  = obj
binDir  = .
inc     = /opt/intel/oneapi/mkl/2024.1/include /usr/include $(srcDir)

debug   = 0

CC      = icx
NVCC    = nvcc
CFlags  = -c -qopenmp $(debug) $(addprefix -I,$(inc))
NVCCFlags = -c -Xcompiler "-fopenmp" $(addprefix -I,$(inc))
LFlags  = -L/opt/intel/oneapi/mkl/2024.1/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread -ldl -lm -qopenmp
cudaLib = -L/opt/cuda/lib64 -lcudart -lcusparse
libs    = -lmetis

ifeq ($(debug),1)
	debug=-g
else
	debug=
endif

# Buscar todos los archivos fuente
sources := $(shell find $(srcDir) -name '*.$(srcExt)')
cudaSources := $(shell find $(srcDir) -name '*.$(cudaExt)')
sources += example_usage.c
srcDirs := $(shell find . -name '*.$(srcExt)' -exec dirname {} \; | uniq)
objects := $(patsubst %.$(srcExt),$(objDir)/%.o,$(sources)) $(patsubst %.$(cudaExt),$(objDir)/%.o,$(cudaSources))

.phony: all clean distclean

all: $(binDir)/$(app)

# Enlazado final
$(binDir)/$(app): buildrepo $(objects)
	@mkdir -p `dirname $@`
	@echo "Linking $@..."
	@$(CC) $(objects) $(LFlags) $(cudaLib) $(libs) -o $@

# Compilar archivos C
$(objDir)/%.o: %.$(srcExt)
	@echo "Compiling C file $<..."
	@$(CC) $< -o $@ $(CFlags)

# Compilar archivos CUDA
$(objDir)/%.o: %.$(cudaExt)
	@echo "Compiling CUDA file $<..."
	@$(NVCC) $< -o $@ $(NVCCFlags)

clean:
	$(RM) -r $(objDir)

distclean: clean
	$(RM) -r $(binDir)/$(app)

buildrepo:
	@$(call make-repo)

define make-repo
   for dir in $(srcDirs); \
   do \
	mkdir -p $(objDir)/$$dir; \
   done
endef

